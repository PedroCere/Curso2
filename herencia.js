/*
üß¨ ¬øQu√© es la herencia en JavaScript?
La herencia es un principio fundamental de la programaci√≥n orientada a objetos (POO) que permite que una clase hija (subclase) herede las propiedades y m√©todos de una clase padre (superclase). Esto permite reutilizar c√≥digo y crear estructuras m√°s organizadas.

üì¶ ¬øC√≥mo se implementa en JavaScript?
1. extends: crea una subclase que hereda de otra clase.
2. super(): se usa dentro del constructor de la subclase para llamar al constructor de la clase padre y heredar sus propiedades.
üß± Sintaxis b√°sica
*/
// Clase padre
class Animal {
    constructor(nombre) {
        this.nombre = nombre;
    }

    hablar() {
        console.log(`${this.nombre} hace un sonido.`);
    }
}

// Clase hija
class Perro extends Animal {
    constructor(nombre, raza) {
        super(nombre); // Llama al constructor de Animal
        this.raza = raza;
    }

    ladrar() {
        console.log(`${this.nombre} est√° ladrando.`);
    }

    // Podemos sobrescribir m√©todos de la clase padre
    hablar() {
        console.log(`${this.nombre} dice guau.`);
    }
}

/*
üéØ ¬øQu√© se hereda?
Cuando una clase hereda de otra:

Hereda todas las propiedades y m√©todos p√∫blicos de la clase padre.

Puede agregar sus propios m√©todos y propiedades.

Puede sobrescribir m√©todos del padre (override).

‚ö†Ô∏è Importante: uso de super
super(...) se debe usar en el constructor de la subclase antes de usar this.

Tambi√©n se puede usar super.metodo() para llamar a un m√©todo del padre desde el hijo.
*/


class Gato extends Animal {
    constructor(nombre) {
        super(nombre); // Importante: primero va super()
    }

    hablar() {
        super.hablar(); // Llama a m√©todo de Animal
        console.log(`${this.nombre} dice miau.`);
    }
}

class Vehiculo {
    constructor(marca) {
        this.marca = marca;
    }

    arrancar() {
        console.log(`${this.marca} est√° arrancando...`);
    }
}

class Coche extends Vehiculo {
    constructor(marca, modelo) {
        super(marca);
        this.modelo = modelo;
    }

    mostrarInfo() {
        console.log(`Coche: ${this.marca} ${this.modelo}`);
    }
}

const miCoche = new Coche("Toyota", "Corolla");
miCoche.arrancar();      // Toyota est√° arrancando...
miCoche.mostrarInfo();   // Coche: Toyota Corolla